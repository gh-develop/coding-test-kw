# -*- coding: utf-8 -*-
"""
계산기에서 Stack의 활용

문자열 수식 계산의 일반적 방법
1. 중위표기법의 수식을 후위표기법으로 변경
2. 후위표기법의 수식을 스택을 이용하여 계산

중위 표기식을 후위표기식으로 변환 방법1
1. 수식의 각 연산자에 대해서 우선순위에 따라 괄호를 사용하여 다시 표현
2. 각 연산자를 그에 대응하는 오른쪽 괄호의 뒤로 이동
3. 괄호 제거
* 문제점
사람이 손으로 처리하기는 쉽지만 프로그램으로 작성하기는 어려움!
*Solution
중위표기식을 후위표기식으로 변환하는 알고리즘 개발!

중위표기법에서 후위표기법으로의 변환 알고리즘
1. 입력 받은 중위표기식에서 토큰을 읽음
2. 토큰이 피연산자이면 토큰을 출력
3. 토큰이 연산자(괄호포함)일 경우
* 우선순위가 높으면 -> 스택에 push
* 우선순위가 높지 않으면 -> 연산자의 우선순위가 토큰의 우선순위보다 작을때까지
                           스택에서 pop한 후 토큰의 연산자를 push
* 만약 top에 연산자가 없으면 -> push
4. 토큰이 오른쪽 괄호 ')'일 경우
* 스택 top에 왼쪽 괄호 '('가 올 때까지 스택에 pop 연산을 수행
* pop한 연산자를 출력
* 왼쪽 괄호를 마난면 pop만 하고 출력하지는 않음
5. 중위표기식에 더 읽을 것이 없다면 중지, 더 읽을 것이 있다면 1부터 반복
6. 스택에 남아 있는 연산자를 모두 pop하여 출력
* 스택 밖에 왼쪽 괄호는 우선 순위가 가장 높으며,
  스택 안의 왼쪽 괄호는 우선 순위가 가장 낮음

토큰: 수식에서 의미 있는 최소의 단위
ISP: 스택 내에 있을 때 우선 순위
ICP: 스택에 들어오는 우선 순위
토큰    ISP    ICP
)        -      -
*, /     2      2
+, -     1      1
(        0      3


후위표기법의 수식을 스택을 이용하여 계산
1. 피연산자를 만나면 스택에 push함
2. 연산자를 만나면 필요한 만큼의 피연산자를 스택에서 pop하여 연산하고,
   연산결과를 다시 스택에 push함
3. 수식이 끝나면, 마지막으로 스택을 pop하여 출력
* 계산 시 주의 사항!
: 후위표기식을 계산 시, 피연산자를 스택에 쌓아 계산!


문자열로 된 수식을 계산 시
스택을 두 번 사용해서 처리했던 연산을 파이썬에서 제공되는 eval() 내장함수로 계산할 수 있음

eval(수식)
* 문자열로 된 수식을 계산함
* Evaluation = "값을 구함" 이란 뜻
* 올바른 수식이 아닌 경우 SyntaxError 예외가 발생함
* eval("6+5*(2-8)/2")는 문자열로 된 수식의 계산 결과를 반환
"""





























